********** Animations ***************

   backface-visibility: hidden 
      => résout le prb du texte qui remonte à la fin d'une anim

   animation-iteration-count: 3; 
      => répéter une anim
   animation-delay: 3s;    
      => ajouter un délai 


   On peut soit utiliser les keyframes pour des anim complexes
   Soit utiliser transition pour les petites anims
   On peut mettre  transition: all .2s; sur le state initial (elem parent) pour que 
   toutes les autres propriétés prennent cette transition

   Rotations 
      => Ajout de perspective sur l'élément parent

   display:none 
      => ne permet pas d'animer l'élément, utiliser plutot opacity:0, visibility:hidden


*********** BEM ********************
   Méthodologie pour structurer efficacement le HTML
   On réfléchit en terme de composants
   *  Un block html ne pouvant exister seul (sans son parent) aura une classe 
      débutant par __classeParent
   *   Un élement à l'intérieur d'un composant venant uniquement modifier son 
      comportement aura une classe avec --classeModifier
   *  Un block pouvant exister seul et être réutiliser aura uniqument sa propre classe


*********** Images *****************
   Priviliégier l'utilisation des % pour les images, pour le responsive
   When to use responsive images:
      1 - Resolution switching (large screen > small screen)
      2 - Density switching (@2x screen > @1px screen)
      3 - Art direction (Different images on different screens size)


********** Position ******************
   Pour centrer un block dans un autre bloc 
   => Le parent doit etre en relative
         position: absolute;
         top: 50%;
         left: 50%;
         transform: translate(-50%, -50%);

   margin: 0 auto 
      => centrer un block à l'intérieur d'un autre block

   position: fixed 
      =>   same as absolute, but stay fixed in his position

   Pour mettre deux éléments cote à cote dans un container
   parent : display:table
   enfant: display: table-cell
            vertical-align: middle;



********** Pseudo classes **********
   :link       
      =>  permet de sélectionner les liens à l'intérieur d'élément
   :visited    
      =>  modifier l'aspect d'un lien après que l'utilisateur l'a visité
   :active     
      => cibler un élément lorsque celui-ci est activé par l'utilisateur
   :target
      => S'applique lorsque l'élement est ciblé, exemple avec un anchor tag


******** Pseudo éléments ***********

   mot-clé ajouté à un sélecteur qui permet de mettre en forme certaines parties de l'élément ciblé par la règle
   ::after => crée un pseudo-élément qui sera le dernier enfant de l'élément sélectionné
               Spécifier obligatoirement content, display, height, et width
   ::before 


******** Resolution *********** 
   192dpi = Résolution du apple retina, habituellement utilisé comme référence

******** Responsive ***********

   * Placer toujours les media queries à la fin, car aucune spécificité n'est ajouté
   * 0 à 600 px = PHONE 
   * 600 à 900 = TABLET PORTRAIT
   * 900 à 1200 = TABLET LANDSCAPE
   * 1200 à 1800 = DESKTOP
   * 1800 et + = BIG DESKTOP

   Desktop first 
      => media query avec max-width
      => On commence par la plus haute valeur et on decrease

   Mobile first
      => media query avec min-width
      => On commence par la plus petite valeur et on augmente

   Les breakpoints se place dans le fichier mixin.scss, dans notre mixin media query manager
   On utilise le @content dans chaque media-query pour injecter le code css qui sera placé 
   par les autres fichiers dans le contenu de la mixin
   Cela permet d'avoir un seul endroit ou nos breakpoints sont définis, ce qui permet de les modifier 
   beaucoup plus rapidement si nécéssaire

   Définir les breakpoints des media query en em , et non en px
   Car si le user change la taille de police par défaut de son navigateur et que l'on a défini nos media query en px,
   celle ci ne seront pas appliqué

   ORDER: 
		Base + typography
		general layout + grid
		page layout
		components


************ divers ***************
   margin: 0 auto 
      => centrer un block à l'intérieur d'un autre block
   max-width:
   => utilise la largeur spécifié, et si le viewport devient trop petit, prend 100% de l'espace
   [attribut] 
      => sélectionne des eléments par attributs
   on peut ajouter ^, * OU $ comme les regex